package hackerrank.ConstructiveAlgorithms;

import java.util.Scanner;

/**
 * Problem:
 * https://www.hackerrank.com/challenges/new-year-chaos/problem
 *
 * It's New Year's Day and everyone's in line for the Wonderland
 * rollercoaster ride! There are a number of people queued up,
 * and each person wears a sticker indicating their initial
 * position in the queue. Initial positions increment by 1 from
 * 1 at the front of the line to n at the back.
 *
 * Function Description
 * Complete the function minimumBribes in the editor below. It
 * must print an integer representing the minimum number of
 * bribes necessary, or Too chaotic if the line configuration
 * is not possible.
 *
 */
public class NewYearChaos {

    public static void main(String args[]) {


        int[] q = {2, 1, 5, 3, 6, 4}; //4
//        int[] q = {2, 5, 1, 3, 4};//Too


        //1 3 2 6 4 8 9 7 5 10
//        int[] q = {1,3,2,6,4,8,9,7,5,10,13,12,11,15,14,18,16,20,19,17,22,23,21,25,24,28,27,26,30,29,31,32,34,33,35,37,39,38,36,41,40,42,43,46,44,47,45,50,51,49,52,48,54,53,55,56,57,58,61,59,63,60,62,66,64,65,69,70,67,68,73,72,71,75,77,74,76,79,78,80,82,83,84,81,86,88,87,85,90,89,93,91,95,92,96,94,97,98,99,102,100,101,104,106,103,105,107,110,111,109,113,108,112,115,114,117,116,120,118,119,121,123,125,122,126,124,128,127,130,129,133,131,132,134,137,136,135,139,141,138,143,140,144,142,147,146,145,148,149,150,152,151,155,153,157,156,154,160,158,159,163,161,162,164,165,168,166,167,170,169,171,172,175,174,173,177,176,178,180,181,179,182,184,183,185,187,188,186,189,191,192,190,194,195,193,196,197,199,198,200,203,201,202,205,207,204,209,208,206,212,210,213,211,214,217,216,215,219,221,218,223,220,225,222,226,227,224,229,228,231,230,234,232,235,233,238,236,240,237,241,239,242,244,243,246,245,249,248,247,251,250,253,255,252,254,258,256,259,261,260,257,262,265,263,264,268,266,270,267,269,272,271,273,275,276,274,277,279,281,278,283,280,284,282,285,287,286,290,288,289,291,293,292,294,297,295,296,300,301,299,298,304,302,303,307,308,305,306,309,311,310,314,313,312,315,318,316,319,317,321,320,324,322,325,327,323,326,330,329,332,328,331,333,336,335,334,338,337,340,341,339,343,345,342,346,348,344,347,349,352,351,350,353,355,354,358,357,356,360,359,361,362,365,364,363,367,366,369,368,371,370,374,372,376,373,375,378,377,381,379,380,382,384,383,386,385,388,387,389,392,390,391,395,394,393,398,397,396,399,402,400,401,404,403,407,405,406,410,408,412,409,411,413,416,415,414,418,417,420,421,419,422,423,425,427,424,429,426,431,428,432,430,435,433,436,434,438,437,439,440,442,444,441,443,445,447,446,449,448,451,453,452,450,454,457,455,459,456,461,458,463,462,460,465,467,464,468,466,470,471,469,472,473,476,475,477,478,474,480,481,479,484,483,485,482,487,486,490,488,492,489,491,494,493,496,498,495,500,497,501,499,503,502,505,506,504,507,508,511,512,510,509,513,516,514,515,517,518,520,522,519,523,525,521,524,526,529,527,531,530,533,528,532,536,537,535,538,534,540,539,542,541,543,545,544,546,549,548,551,547,550,552,554,553,556,555,558,560,557,561,563,559,565,562,564,567,566,569,568,571,573,570,572,575,574,576,579,578,577,581,582,583,580,585,584,588,589,586,587,591,590,592,595,593,594,596,598,597,600,599,603,602,604,601,607,605,609,606,608,611,610,612,615,613,614,617,616,619,618,620,622,624,621,623,625,627,626,630,629,628,632,631,634,633,636,635,637,639,638,640,642,641,645,644,643,648,646,649,647,652,651,650,654,653,656,657,659,655,660,661,663,658,664,662,667,666,669,668,665,671,672,670,673,675,677,674,676,678,681,680,679,684,682,685,686,687,688,683,690,691,693,689,692,695,694,697,696,700,699,698,701,703,702,705,704,707,706,708,710,709,713,711,712,715,714,717,716,719,720,718,722,721,724,726,725,727,729,723,731,732,728,734,730,733,737,735,738,740,741,736,739,744,743,746,747,742,745,748,751,750,752,749,753,754,756,755,759,760,761,757,758,763,762,766,765,764,769,768,770,767,773,772,771,776,777,774,778,775,780,779,781,783,782,785,784,788,786,787,789,791,790,793,794,795,792,798,796,799,797,802,801,800,804,803,806,805,809,808,807,812,813,811,815,814,810,818,816,819,817,820,821,822,825,823,824,828,827,826,829,831,830,834,832,833,836,838,839,837,835,840,842,841,843,845,846,844,849,848,847,851,850,854,852,856,855,853,858,857,859,862,860,864,865,861,866,863,867,870,868,871,872,869,873,875,874,878,876,879,880,877,883,881,885,882,884,887,886,890,888,892,891,889,893,894,895,896,897,900,899,898,901,902,903,904,906,905,909,907,911,910,908,913,912,916,915,914,918,917,920,919,922,921,925,924,923,927,926,930,928,929,932,933,931,934,935,936,937,940,938,939,942,941,945,943,947,944,949,946,948,952,951,954,950,955,953,956,958,957,961,959,960,963,962,966,965,964,969,968,971,967,973,972,970,974,975,976,979,978,981,977,980,984,983,982,985,987,986,989,988,992,993,990,994,991,995,996,997}; //709
        //Expected: 709; Output: 697

//        int[] q = {2,4,5,1,3,8,9,10,6,7,13,12,14,11,16,18,15,17,19,22,20,21,23,26,25,28,24,27,30,32,29,34,31,35,33,37,36,39,41,38,42,43,40,45,44,48,46,47,51,50,49,53,54,52,55,57,56,60,59,58,61,64,63,62,67,66,65,70,69,68,71,74,73,72,77,76,79,78,75,80,82,81,85,83,84,87,86,89,90,88,91,94,92,93,95,98,97,100,96,102,101,99,103,105,104,107,106,110,108,112,109,111,113,116,114,115,118,117,119,121,123,120,122,124,127,125,126,130,128,132,133,129,131,135,134,137,136,139,138,140,143,141,145,142,144,146,147,148,150,149,153,151,152,156,155,154,159,157,160,158,162,164,161,165,167,163,166,169,168,172,170,171,173,174,176,177,175,180,178,182,181,183,179,184,186,185,189,188,187,190,191,194,192,195,193,197,196,200,199,198,202,203,201,204,206,208,205,210,207,209,211,213,215,212,217,216,214,219,220,221,218,222,224,226,227,223,225,230,229,228,231,233,232,235,234,238,237,236,240,239,243,242,244,241,245,246,249,248,247,250,253,251,252,254,255,257,256,258,261,259,260,263,265,262,266,264,268,269,267,272,270,274,273,271,275,276,277,278,279,282,280,283,281,284,285,287,286,288,290,289,293,294,295,291,292,297,299,296,298,302,301,300,305,304,303,308,306,310,309,307,313,311,315,312,314,317,316,319,320,318,321,322,324,323,325,327,326,330,329,328,331,333,332,334,337,336,335,339,340,338,342,341,345,344,343,348,349,347,346,351,353,350,354,355,352,357,356,359,358,362,360,361,363,364,365,366,367,370,369,368,371,374,372,373,376,378,375,379,377,381,383,382,385,380,386,387,384,390,389,388,393,391,395,394,392,397,396,399,400,401,403,398,402,406,407,405,409,408,411,404,413,410,415,414,412,418,417,416,419,422,420,424,423,425,421,428,429,430,431,426,427,432,435,434,433,438,436,440,437,439,443,442,441,445,444,447,446,449,448,450,452,451,455,453,454,456,459,458,457,461,462,460,464,463,466,465,467,469,468,470,472,471,475,473,474,476,477,479,478,482,480,481,484,485,486,483,488,487,491,490,489,494,492,496,493,495,497,499,500,501,498,503,502,506,504,507,505,510,508,509,512,511,513,514,516,515,517,518,519,520,521,524,523,522,525,526,527,530,528,529,531,533,532,536,534,537,535,538,539,540,542,543,545,544,541,547,546,549,548,551,550,553,552,556,555,558,554,557,559,561,562,560,564,563,565,568,567,566,570,572,569,573,571,575,574,577,579,576,581,578,580,584,583,585,582,587,586,588,589,591,590,594,593,592,596,597,595,600,599,598,603,602,601,604,606,608,605,609,610,607,612,613,615,611,614,618,616,617,619,621,623,622,620,624,626,625,627,629,628,630,632,631,635,633,634,637,638,636,641,639,640,643,642,645,644,648,647,646,650,649,653,651,652,654,655,656,657,660,659,658,661,664,663,666,667,662,665,670,668,672,673,669,671,676,674,675,677,678,681,679,682,683,685,684,680,688,686,689,691,687,690,692,693,695,696,694,697,699,701,698,700,703,705,706,702,704,708,707,710,709,711,713,712,715,714,716,717,720,718,721,722,719,723,724,725,726,727,730,729,731,728,733,735,736,734,732,738,737,739,740,743,742,741,744,747,745,746,750,748,752,749,751,753,755,754,757,756,759,760,758,762,761,764,763,766,765,767,770,769,768,773,771,772,774,777,776,779,775,780,782,781,778,784,786,783,788,785,787,789,791,790,794,792,796,793,798,799,797,795,802,803,801,800,804,806,808,805,807,809,811,812,810,815,813,814,818,816,817,819,822,820,823,821,826,825,824,827,828,829,830,831,833,832,834,837,835,836,838,840,839,843,841,844,842,847,845,848,846,850,849,853,851,854,852,857,856,855,860,858,862,859,864,861,863,866,865,869,867,871,868,870,874,872,875,877,873,879,880,876,878,883,881,884,885,882,888,887,890,886,889,893,891,895,892,896,894,897,899,898,901,900,903,902,905,906,907,904,910,908,911,909,913,912,916,915,914,918,917,920,921,919,924,923,922,926,925,928,927,930,929,932,931,935,933,934,937,936,938,939,942,941,940,943,944,947,945,948,949,946,952,950,951,955,954,953,957,956,960,958,962,959,964,965,961,963,968,969,966,967,972,970,971,973,974,975,977,976,979,980,978,982,981,983,984,986,985,987,988,991,989,992,990,993,996,994,998,995,997};
        //E:704; O:692

        // 3.2,= 1
        // 6.5,6.4 = 2
        // 6.8 =2
        // 7.9 = 2
        //
        //        int[] q = {1.5, 2.1, 3.2, 4.3, 5.7, 6.8, 7.6, 8.4};
//          5.4, 7.2, 8.2
//         3,5; 4,3; 5,7; 6,8; 7,6; 8,4

//        int[] q = {1, 2, 5, 3, 7, 8, 6, 4}; //7 // Works
        // 1, 2, 3.5, 4.3, 5.7, 6.8, 7.6, 8,4
        // 3-5 = 2 Swaps
        // 4-3 = 1 Swap
        // 5-7 = 2 Swaps
        // 6-8 = 2 Swaps
        // 7-6 = 1 S
        // 8-4 = 4 S

//      Too chaotic : {1.5, 2.1, 3.2, 4.3, 5.7, 6.8, 7.6, 8.4};


        // 2b1,
        // - in place of 1,2  : +1
        // - in place of 2,1  : -1

        // 5b4, 5b3
        // - in place of 3,5 : +2
        // - in place of 4,3 : -1
        // - in place of 5,4 : -1

        // 8b7,8b6
        // - in place of 6,8 : +2
        // - in place of 7,6 : -1
        // - in place of 8,7 : -1
        // Total changes +1,+2,+2 | -1,-1,-1,-1,-1; Sum is 0

        minimumBribes(q);
    }

    static void minimumBribes(int[] q) {
        int bribe = 0;
        boolean chaotic = false;
        for(int i = 0; i < q.length; i++)
        {
            if( q[i]-(i+1) > 2 )
            {
                chaotic = true;
                break;
            }

            int j = Math.max(0, q[i] - 2);
            while ( j < i ) {
                if (q[j] > q[i])
                    bribe++;
                j++;
            }
        }

        if(chaotic)
            System.out.println("Too chaotic");
        else
            System.out.println(bribe);
    }

    static void minimumBribes12Less(int[] q) {

        if( q[0] > 3 ) {
            System.out.println("Too chaotic");

        } else {
            int numberOfBribes = 0;
            int actualValue = 0;
            int i;

            for ( i=0; i < q.length; i++) {
                actualValue = i+1;

                if ( q[i] == actualValue || q[i] < actualValue) {

                    if (  q[i] < actualValue-2 ) {
                        numberOfBribes++;
                    }

                } else if( q[i] == actualValue + 1
                        || q[i] == actualValue + 2 ) {

                    if ( q[i] == actualValue + 2 ) numberOfBribes+=2;

                    else numberOfBribes++;

                } else {
                    System.out.println("Too chaotic");
                    break;
                }
            }

            if(i == q.length) System.out.println(numberOfBribes);

        }
    }

    static void minimumBribesOther(int[] q) {

        /**
         *
         Assumption: There is no duplicates
         Solution:
         Check the current index and its value.
         The value is associative to index such that
         a[i] = i+1, ie, a[0]=1
         */
        /**
         *
         {2, 1, 5, 3, 4, 9,7,8}

         {2,3,1,4,5,6,7,8,9,10}

         Case 2: 1,4,2,6,3,5,7,8,9,10
         - 4b3, 4b2, 6b5, 6b3
         - in place of 2, 4 : +2
         - in place of 3, 2 : -1
         - in place of 4, 6 : +2
         - in place of 5, 3 : -2
         - in place of 6, 5 : -1
         -

         Case3: 1,3,2,4,5,6,7,8,9,10

         1,2,3,4,5,6,7,8,9,10
         Max Values
         1 = 2,3
         2 = 3,4
         3 = 4,5
         4 = 5,6

         if ( q[ i - 1 ] == i
         || q[ i - 1 ] == i + 1 ) {

         if ( q[ i - 1 ] == i + 2 ) numberOfBribes+=2;
         else numberOfBribes++;
         }


         */


        if( q[0] > 3 ) { System.out.println("Too chaotic"); }

        else {
            int numberOfBribes = 0;
            int negativeBribes = 0;
            int i = 0;

            while ( i < q.length ) {
                int actualValue = i + 1;

                if( q[i] == actualValue );

                else if ( q[i] == actualValue + 1
                        || q[i] == actualValue + 2 ) {

                    if ( q[i] == actualValue + 2 ) numberOfBribes+=2;

                    else numberOfBribes++;

                }   else if ( q[i] == Math.abs( actualValue - 1 )
                        || q[i] == Math.abs( actualValue - 2 ) )  {

                    if ( q[i] == Math.abs( actualValue - 2 ) ) negativeBribes+=2;

                    else negativeBribes++;

                } else {
                    System.out.println("Too chaotic");
                    break;
                }

                i++;
            }

            if ( numberOfBribes == negativeBribes) System.out.println(numberOfBribes);
        }
    }


}
